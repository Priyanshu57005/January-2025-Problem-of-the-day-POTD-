class Solution {
public:
    int maximumInvitations(vector<int>& fav) {
        int n = fav.size();
        vector<int> inDeg(n, 0), depth(n, 1);

        // Calculate in-degrees
        for (int i = 0; i < n; ++i) {
            inDeg[fav[i]]++;
        }

        // Topological sorting to calculate depth of non-cycle nodes
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (inDeg[i] == 0) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            int nxt = fav[cur];
            depth[nxt] = max(depth[nxt], depth[cur] + 1);
            if (--inDeg[nxt] == 0) {
                q.push(nxt);
            }
        }

        // Process cycles
        int maxCycle = 0, twoCycleSum = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; ++i) {
            if (inDeg[i] == 0 || visited[i]) continue;

            int cur = i, len = 0;
            while (!visited[cur]) {
                visited[cur] = true;
                cur = fav[cur];
                len++;
            }

            if (len == 2) {
                twoCycleSum += depth[i] + depth[fav[i]];
            } else {
                maxCycle = max(maxCycle, len);
            }
        }

        return max(maxCycle, twoCycleSum);
    }
};
static auto init = []() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return nullptr; }();
