class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size(), id = 2, res = 0;
        unordered_map<int, int> area;
        
        function<int(int, int, int)> dfs = [&](int r, int c, int id) {
            if (r < 0 || c < 0 || r >= n || c >= n || grid[r][c] != 1) return 0;
            grid[r][c] = id;
            return 1 + dfs(r + 1, c, id) + dfs(r - 1, c, id) + dfs(r, c + 1, id) + dfs(r, c - 1, id);
        };
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    area[id] = dfs(i, j, id);
                    res = max(res, area[id++]);
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    unordered_set<int> seen;
                    int sum = 1;
                    for (auto [dx, dy] : vector<pair<int, int>>{{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
                        int x = i + dx, y = j + dy;
                        if (x >= 0 && y >= 0 && x < n && y < n && grid[x][y] > 1 && seen.insert(grid[x][y]).second) {
                            sum += area[grid[x][y]];
                        }
                    }
                    res = max(res, sum);
                }
            }
        }
        
        return res;
    }
};
