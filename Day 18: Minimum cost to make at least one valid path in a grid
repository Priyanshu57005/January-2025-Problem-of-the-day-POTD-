class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;
        vector<vector<int>> cost(m, vector<int>(n, numeric_limits<int>::max()));
        cost[0][0] = 0; 
        vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        pq.push({0, 0, 0});

        while (!pq.empty()) {
            auto[currCost, x, y] = pq.top();
            pq.pop();

            if (x == m - 1 && y == n - 1) {
                return currCost;
            }

            for (int i = 0; i < 4; i++) {
                int nx = x + directions[i][0];
                int ny = y + directions[i][1];

                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int newCost = currCost + (i + 1 == grid[x][y] ? 0 : 1); 

                    if (newCost < cost[nx][ny]) {
                        cost[nx][ny] = newCost;
                        pq.push({newCost, nx, ny});
                    }
                }
            }
        }

        return -1;
    }
};
