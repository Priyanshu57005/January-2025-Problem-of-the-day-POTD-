class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n,0);
        function<bool(int)> dfs = [&](int node)
        {
            if(color[node] == 1) return false;
            if(color[node] == 2) return true;

            color[node] = 1;
            for(int neighbor : graph[node])
            {
                if(!dfs(neighbor)) return false;
            }
            color[node] = 2;
            return true;
        };
        vector<int> safeNodes;
        for (int i = 0; i < n; ++i) {
        if (dfs(i)) {
            safeNodes.push_back(i);
        }
    }
    return safeNodes;
    }
};
