class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n + 1);
        iota(parent.begin(), parent.end(), 0);
        function<int(int)> find = [&](int i) {
            if (parent[i] == i)
            {
                return i;
            }
            return parent[i] = find(parent[i]);

        };

        function<bool(int, int)> unite = [&](int i, int j) {
            int root_i = find(i);
            int root_j = find(j);
            if (root_i != root_j) {
                parent[root_i] = root_j;
                return true;
            }
            return false;
        };

        vector<int> redundant_edge;
        for (const auto& edge : edges) {
            if (!unite(edge[0], edge[1])) {
            redundant_edge = edge; 
            }
        }

        return redundant_edge;
    }
};
